// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function string(prim) {
  return prim;
}

function $$int(n) {
  return String(n);
}

var $$float = Pervasives.string_of_float;

function any(v) {
  return String(v);
}

var Text = /* module */[
  /* string */string,
  /* int */$$int,
  /* float */$$float,
  /* any */any
];

var nothing = null;

var nbsp = ('\u00a0');

var $$null = null;

function join(items) {
  return $$String.concat(" ", List.filter((function (param) {
                      return "" !== param;
                    }))(items));
}

function if_(cond, cls) {
  if (cond) {
    return cls;
  } else {
    return "";
  }
}

function fromOption(param) {
  if (param) {
    return param[0];
  } else {
    return "";
  }
}

var ClassName = /* module */[
  /* join */join,
  /* if_ */if_,
  /* fromOption */fromOption
];

var Helpers = /* module */[
  /* Text */Text,
  /* text */string,
  /* nothing */nothing,
  /* nbsp */nbsp,
  /* null */$$null,
  /* ClassName */ClassName
];

function pure(make) {
  var instance = ReasonReact.statelessComponent("Pure");
  return Curry._1(make, (function (element, _) {
                return /* record */[
                        /* debugName */instance[/* debugName */0],
                        /* reactClassInternal */instance[/* reactClassInternal */1],
                        /* handedOffState */instance[/* handedOffState */2],
                        /* willReceiveProps */instance[/* willReceiveProps */3],
                        /* didMount */instance[/* didMount */4],
                        /* didUpdate */instance[/* didUpdate */5],
                        /* willUnmount */instance[/* willUnmount */6],
                        /* willUpdate */instance[/* willUpdate */7],
                        /* shouldUpdate */instance[/* shouldUpdate */8],
                        /* render */(function () {
                            return element;
                          }),
                        /* initialState */instance[/* initialState */10],
                        /* retainedProps */instance[/* retainedProps */11],
                        /* reducer */instance[/* reducer */12],
                        /* subscriptions */instance[/* subscriptions */13],
                        /* jsElementWrapped */instance[/* jsElementWrapped */14]
                      ];
              }));
}

function make(children) {
  return ReasonReact.wrapJsForReason(React.Fragment, { }, children);
}

var Fragment = /* module */[/* make */make];

var component = ReasonReact.statelessComponent("Control.Map");

function make$1(items, $staropt$star, render) {
  var empty = $staropt$star ? $staropt$star[0] : nothing;
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(/* None */0, /* None */0, make(/* array */[items.length !== 0 ? $$Array.map(render, items) : empty]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var $$Map = /* module */[
  /* component */component,
  /* make */make$1
];

var component$1 = ReasonReact.statelessComponent("Control.MapList");

function make$2(items, $staropt$star, render) {
  var empty = $staropt$star ? $staropt$star[0] : nothing;
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(/* None */0, /* None */0, make$1($$Array.of_list(items), /* Some */[empty], render));
            }),
          /* initialState */component$1[/* initialState */10],
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */component$1[/* reducer */12],
          /* subscriptions */component$1[/* subscriptions */13],
          /* jsElementWrapped */component$1[/* jsElementWrapped */14]
        ];
}

var MapList = /* module */[
  /* component */component$1,
  /* make */make$2
];

var component$2 = ReasonReact.statelessComponent("Control.If");

function make$3(cond, render) {
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function () {
              if (cond) {
                return Curry._1(render, /* () */0);
              } else {
                return nothing;
              }
            }),
          /* initialState */component$2[/* initialState */10],
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */component$2[/* reducer */12],
          /* subscriptions */component$2[/* subscriptions */13],
          /* jsElementWrapped */component$2[/* jsElementWrapped */14]
        ];
}

var If = /* module */[
  /* component */component$2,
  /* make */make$3
];

var component$3 = ReasonReact.statelessComponent("Control.IfSome");

function make$4(option, render) {
  return /* record */[
          /* debugName */component$3[/* debugName */0],
          /* reactClassInternal */component$3[/* reactClassInternal */1],
          /* handedOffState */component$3[/* handedOffState */2],
          /* willReceiveProps */component$3[/* willReceiveProps */3],
          /* didMount */component$3[/* didMount */4],
          /* didUpdate */component$3[/* didUpdate */5],
          /* willUnmount */component$3[/* willUnmount */6],
          /* willUpdate */component$3[/* willUpdate */7],
          /* shouldUpdate */component$3[/* shouldUpdate */8],
          /* render */(function () {
              if (option) {
                return Curry._1(render, option[0]);
              } else {
                return nothing;
              }
            }),
          /* initialState */component$3[/* initialState */10],
          /* retainedProps */component$3[/* retainedProps */11],
          /* reducer */component$3[/* reducer */12],
          /* subscriptions */component$3[/* subscriptions */13],
          /* jsElementWrapped */component$3[/* jsElementWrapped */14]
        ];
}

var IfSome = /* module */[
  /* component */component$3,
  /* make */make$4
];

var Control = /* module */[
  /* Map */$$Map,
  /* MapList */MapList,
  /* If */If,
  /* IfSome */IfSome
];

var text = string;

exports.Helpers = Helpers;
exports.Text = Text;
exports.text = text;
exports.nothing = nothing;
exports.nbsp = nbsp;
exports.$$null = $$null;
exports.ClassName = ClassName;
exports.pure = pure;
exports.Fragment = Fragment;
exports.Control = Control;
/* nothing Not a pure module */
